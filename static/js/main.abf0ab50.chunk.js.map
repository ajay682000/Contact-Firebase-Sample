{"version":3,"sources":["firebase.js","Components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Contact","useState","name","setName","email","setEmail","message","setMessage","loader","setLoader","className","onSubmit","e","preventDefault","collection","add","then","alert","catch","error","placeholder","value","onChange","target","type","style","background","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"gQAgBIA,E,OAdcC,EAASC,cAAc,CAGrCC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAKUC,YCmDNC,EAhEC,WAAO,IAAD,EACMC,mBAAS,IADf,mBACXC,EADW,KACLC,EADK,OAEQF,mBAAS,IAFjB,mBAEXG,EAFW,KAEJC,EAFI,OAGYJ,mBAAS,IAHrB,mBAGXK,EAHW,KAGFC,EAHE,OAIUN,oBAAS,GAJnB,mBAIXO,EAJW,KAIHC,EAJG,KA6BlB,OACI,0BAAMC,UAAU,OAAOC,SAxBN,SAACC,GAClBA,EAAEC,iBACFJ,GAAU,GAEVpB,EAAGyB,WAAW,WACbC,IAAI,CACDb,KAAMA,EACNE,MAAOA,EACPE,QAASA,IAEZU,MAAK,WACFP,GAAU,GACVQ,MAAM,wBAETC,OAAM,SAACC,GACJF,MAAME,EAAMb,SACZG,GAAU,MAEdN,EAAQ,IACRE,EAAS,IACTE,EAAW,MAKb,2CAEA,uCACA,2BACEa,YAAY,OACZC,MAAOnB,EACPoB,SAAU,SAACV,GAAD,OAAOT,EAAQS,EAAEW,OAAOF,UAGpC,wCACA,2BACED,YAAY,QACZC,MAAOjB,EACPkB,SAAU,SAACV,GAAD,OAAOP,EAASO,EAAEW,OAAOF,UAGrC,0CACA,8BACED,YAAY,UACZC,MAAOf,EACPgB,SAAU,SAACV,GAAD,OAAOL,EAAWK,EAAEW,OAAOF,UAGvC,4BACEG,KAAK,SACLC,MAAO,CAAEC,WAAYlB,EAAS,OAAS,oBAFzC,YC7CSmB,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLwB,QAAQxB,MAAMA,EAAMb,c","file":"static/js/main.abf0ab50.chunk.js","sourcesContent":["import firebase from'firebase';\n\nvar firebaseApp = firebase.initializeApp({\n    // Your web app's Firebase configuration\n \n    apiKey: \"AIzaSyBZ9weLeWuwXWPv5_K7VhDoLK4Fcezh8kA\",\n    authDomain: \"contact-form-example.firebaseapp.com\",\n    databaseURL: \"https://contact-form-example.firebaseio.com\",\n    projectId: \"contact-form-example\",\n    storageBucket: \"contact-form-example.appspot.com\",\n    messagingSenderId: \"796355944119\",\n    appId: \"1:796355944119:web:6a04a1615ce9f3418bb732\"\n \n  \n});\n\nvar db = firebaseApp.firestore();\n\nexport { db };","import React, {useState} from 'react';\nimport {db} from '../firebase'\n\nconst Contact = () => {\n    const [name, setName] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [message, setMessage] = useState(\"\")\n    const [loader, setLoader] = useState(false);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setLoader(true);\n\n        db.collection(\"Contact\")\n        .add({\n            name: name,\n            email: email,\n            message: message,\n        })\n        .then(() => {\n            setLoader(false);\n            alert(\"Response Recorded\")\n        })\n        .catch((error) => {\n            alert(error.message);\n            setLoader(false);\n        })\n        setName(\"\");\n        setEmail(\"\");\n        setMessage(\"\");\n    };\n\n    return (\n        <form className=\"form\" onSubmit={handleSubmit}>\n      <h1>Contact Us </h1>\n\n      <label>Name</label>\n      <input\n        placeholder=\"Name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n\n      <label>Email</label>\n      <input\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n\n      <label>Message</label>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      ></textarea>\n\n      <button\n        type=\"submit\"\n        style={{ background: loader ? \"#ccc\" : \" rgb(2, 2, 110)\" }}\n      >\n        Submit\n      </button>\n    </form>\n    )\n}\n\nexport default Contact;","import React from 'react';\nimport './App.css';\nimport Contact from './Components/Contact';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}